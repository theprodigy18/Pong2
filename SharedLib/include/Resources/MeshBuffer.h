#pragma once

#include <vec.h>

typedef struct _Vertex
{
    Vec2 pos;
    u8   color[4];
    Vec2 uv;
} Vertex;

typedef struct _VertexAttribLayout
{
    u32    location; // Location in shader.
    u32    count;    // Data count.
    GLenum type;     // GL_FLOAT, GL_INT, etc.
    bool   normalized;
    u32    offset; // In bytes.
} VertexAttribLayout;

typedef struct _PackData
{
    const void* pData;
    u32         count;
    u32         stride; // Per vertex in bytes.
} _PackData;

typedef struct _PackData* PackData;

typedef struct _Mesh
{
    GLuint vao;
    GLuint vbo;
    GLuint ibo;
} Mesh;

// Factory functions for creating PackData according to layout.
// This function doesnt allocate any memory.
// So you must make sure all data are valid.
bool DROP_PackVertex(
    const void* pVertices, u32 vertexStride, u32 vertexCount,
    const VertexAttribLayout* pLayout, u32 layoutCount,
    PackData* pData, VertexAttribLayout** ppLayout);

// Factory functions for creating VBO.
bool DROP_CreateVertexBuffer(const PackData data, GLuint* pVBO);

// Factory functions for creating VAO with VBO and layout.
bool DROP_CreateVertexArray(GLuint vbo, u32 stride, const VertexAttribLayout* pLayout, u32 layoutCount, GLuint* pVAO);

// Factory functions for creating IBO.
bool DROP_CreateIndexBuffer(GLuint vao, const u32* pIndices, u32 count, GLuint* pIBO);

// Destroy packed data that generated by DROP_PackVertex.
void DROP_DestroyPackData(PackData* pData);

// Destroy layout that generated by DROP_PackVertex.
void DROP_DestroyLayout(VertexAttribLayout** ppLayout);
